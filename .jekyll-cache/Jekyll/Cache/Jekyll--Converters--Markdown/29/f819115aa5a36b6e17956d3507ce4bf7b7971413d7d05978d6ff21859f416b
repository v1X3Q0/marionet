I"¸<h2 id="reflect-loading-elf-binaries">Reflect loading ELF binaries</h2>

<p>ELF shared object files behave very similarly to Windows PE DLLs. One of the
most similar features is the provided API ability to load a library, dlload and
LoadLibrary. A key weakness of dlload is ita lack of the ability to load a
compiled elf executable, to say load or even reflectively inject an executable.
This post will go over implementing a dlload for executable elf files, in
addition to a custom dlsym to aid in retrieving dlload.</p>

<p>The first step in this process is identifying the valid offsets required in a
correct ELF header. Assuming a passed in blob is valid, the program header can
be located by examining the elf header using the linux man pages.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ELF</span> <span class="n">header</span> <span class="p">(</span><span class="n">Ehdr</span><span class="p">)</span>
    <span class="n">The</span> <span class="n">ELF</span> <span class="n">header</span> <span class="n">is</span> <span class="n">described</span> <span class="n">by</span> <span class="n">the</span> <span class="n">type</span> <span class="n">Elf32_Ehdr</span> <span class="n">or</span> <span class="n">Elf64_Ehdr</span><span class="o">:</span>

        <span class="cp">#define EI_NIDENT 16
</span>
        <span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">e_ident</span><span class="p">[</span><span class="n">EI_NIDENT</span><span class="p">];</span>
            <span class="kt">uint16_t</span>      <span class="n">e_type</span><span class="p">;</span>
            <span class="kt">uint16_t</span>      <span class="n">e_machine</span><span class="p">;</span>
            <span class="kt">uint32_t</span>      <span class="n">e_version</span><span class="p">;</span>
            <span class="n">ElfN_Addr</span>     <span class="n">e_entry</span><span class="p">;</span>
            <span class="n">ElfN_Off</span>      <span class="n">e_phoff</span><span class="p">;</span>
            <span class="n">ElfN_Off</span>      <span class="n">e_shoff</span><span class="p">;</span>
            <span class="kt">uint32_t</span>      <span class="n">e_flags</span><span class="p">;</span>
            <span class="kt">uint16_t</span>      <span class="n">e_ehsize</span><span class="p">;</span>
            <span class="kt">uint16_t</span>      <span class="n">e_phentsize</span><span class="p">;</span>
            <span class="kt">uint16_t</span>      <span class="n">e_phnum</span><span class="p">;</span>
            <span class="kt">uint16_t</span>      <span class="n">e_shentsize</span><span class="p">;</span>
            <span class="kt">uint16_t</span>      <span class="n">e_shnum</span><span class="p">;</span>
            <span class="kt">uint16_t</span>      <span class="n">e_shstrndx</span><span class="p">;</span>
        <span class="p">}</span> <span class="n">ElfN_Ehdr</span><span class="p">;</span>
</code></pre></div></div>

<p>As can the section header. The section header will be used for</p>

<p><a href="./">back</a></p>
:ET